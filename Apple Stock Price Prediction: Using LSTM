# Import necessary libraries
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout

# Load data (from Tingo API)
data = pd.read_csv('apple_stock_data.csv')
data = data['Close'].values.reshape(-1, 1)

# Data scaling
scaler = MinMaxScaler(feature_range=(0, 1))
scaled_data = scaler.fit_transform(data)

# Create training dataset (100 timesteps, 30-day prediction)
def create_dataset(data, time_step=100):
    X, y = [], []
    for i in range(len(data) - time_step - 30):
        X.append(data[i:i + time_step, 0])
        y.append(data[i + time_step:i + time_step + 30, 0])
    return np.array(X), np.array(y)

time_step = 100
X, y = create_dataset(scaled_data, time_step)

# Reshape data for LSTM input
X = X.reshape(X.shape[0], X.shape[1], 1)

# Build LSTM model
model = Sequential()
model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))
model.add(Dropout(0.2))
model.add(LSTM(units=50, return_sequences=False))
model.add(Dropout(0.2))
model.add(Dense(units=30))  # Predicting next 30 days

# Compile model
model.compile(optimizer='adam', loss='mean_squared_error')

# Train the model
model.fit(X, y, epochs=10, batch_size=64)

# Save model for deployment
model.save('apple_stock_lstm_model.h5')

# Testing and evaluation
test_data = scaled_data[-(time_step + 30):]
X_test, y_test = create_dataset(test_data, time_step)
X_test = X_test.reshape(X_test.shape[0], X_test.shape[1], 1)

predictions = model.predict(X_test)
predictions = scaler.inverse_transform(predictions)

# Calculate RMSE
rmse = np.sqrt(np.mean(np.square(predictions - y_test)))
print(f'Test RMSE: {rmse}')
